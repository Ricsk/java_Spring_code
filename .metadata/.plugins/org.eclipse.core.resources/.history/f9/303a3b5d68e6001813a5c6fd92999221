package com.smart.aop;

import java.util.Collections;
import java.util.List;

import org.apache.log4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.OrderComparator;
import org.springframework.util.Assert;



public class SystemBootManager{
	private org.slf4j.Logger logger = LoggerFactory.getLogger(this.getClass());
	private List<SystemBootAddon>systemBootAddons = Collections.EMPTY_LIST;
	private boolean hasRunOnce = false;
	
	//注入所有SystemBootAddon插件
	@Autowired(required = false)
	public void setSystemBootAddons(List<SystemBootAddon> systemBootAddons) {
		Assert.notEmpty(systemBootAddons);
		OrderComparator.sort(systemBootAddons);
		this.systemBootAddons = systemBootAddons;
	}
	
	//触发所有插件
	public void onApplicationEvent(ContextRefreshedEvent event) {
		if(!hasRunOnce) {
			for(SystemBootAddon systemBootAddon:systemBootAddons) {
				systemBootAddon.onReady();
				if(logger.isDebugEnabled()) {
					logger.debug("执行插件:{}" ,systemBootAddon.getClass().getCanonicalName());
				}
			}
			hasRunOnce = true;
		}else {
			if(logger.isDebugEnabled()) {
				logger.debug("已执行过容器启动插件集，本次忽略之");
			}
		}
	}
}